package gen.[%=ele.parent.s_name%].domainevent;

import gen.annotation.DomainEvent;
import gen.annotation.DomainAttribute;
import gen.annotation.DomainBehaviour;

@DomainEvent(identifier = "[%=ele.s_identifier%]", timestamp = "[%=ele.s_timestamp%]", publisher = "[%=ele.s_publisher%].class", subscriber = "[%=ele.s_subscriber%]")
public class [%=ele.s_name%]{

	[* 生成领域事件的属性*]
[%for (attribute in ele.c_ownedAttribute) { %]
	[% var attributeType = attribute.c_type.s_type.first();	%]	 
	
	//所生成的领域事件所对应的属性
	@DomainAttribute
	private [%=attributeType%] [%=attribute.s_name %];
[%}%]

	[%var parameter=""; %]
	[%for (attribute in ele.c_ownedAttribute) { %]
	[% 	var attributeType = attribute.c_type.s_type.first();	
		var attributeName = attribute.s_name;
		parameter = parameter + attributeType+ " "+attributeName + ",";%]	 
	[%}%]
		
	[% if(parameter.length()>0)
		parameter=parameter.substring(0,parameter.length()-1);%]
	
	//领域事件的有参构造函数
	public [%=ele.s_name%]([%=parameter%]){
		[%for (attribute in ele.c_ownedAttribute) { %]
	[% var attributeType = attribute.c_type.s_type.first();	%]	 
		this.[%=attribute.s_name %]=[%=attribute.s_name %];
		[%}%]
	
	}
	
	//领域事件的无参构造函数
	public [%=ele.s_name%](){
	
	}
	
	[*生成领域事件的方法 *]

	[%for (o in ele.c_ownedOperation) { %]
	[% 	var name = o.s_name;	%]	 
	
	//自动生成的领域事件的方法框架，需要软件开发人员手动实现主体部分
	@DomainBehaviour
	public void [%=name %]([%=operationParameter%]){
	
	}
[%}%]


	//属性的getter与setter方法
	[%for (attribute in ele.c_ownedAttribute) { %]
	[% 	var attributeType = attribute.c_type.s_type.first();
		var name = attribute.s_name;
		var newname = name.substring(0,1).toUpperCase() + name.substring(1);	%]	 
	 
	public [%=attributeType%] get[%=newname%](){
	
		return this.[%=name%];
		
	}
	
	public void set[%=newname%]([%=attributeType %] cur){
	
		this.[%=name%]=[%=name%];
	
	}
		
	[%}%]
}